{"version":3,"sources":["components/SearchField/index.js","components/ResultsGrid/index.js","api/index.js","config.js","App.js","serviceWorker.js","index.js"],"names":["SearchField","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","value","onHandleSearchClick","bind","assertThisInitialized","onHandleQueryChange","onSearchClicked","e","setState","target","react_default","a","createElement","className","TextField","fullWidth","onChange","Button","color","onClick","React","Component","Saved","ActionsCell","_ref","setIsRelated","result","labeled","ResultsGrid_Saved","size","variant","ResultsGrid","_ref2","results","onResultSelected","Table","TableHead","TableRow","TableCell","align","TableBody","map","key","url","href","name","snippet","ResultsGrid_ActionsCell","defaultProps","search","query","Promise","resolve","reject","path","concat","request","Request","method","fetch","then","res","json","values","catch","err","saveLabel","form","headers","Content-Type","body","JSON","stringify","App","selectedUrl","lastSearchQuery","q","webPage","isRelated","index","findIndex","x","toConsumableArray","slice","objectSpread","Paper","components_SearchField","components_ResultsGrid","src","title","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.6bb6b17b.chunk.js","sourcesContent":["import React from 'react';\nimport TextField from '@material-ui/core/TextField';\nimport Button from '@material-ui/core/Button';\nimport './styles.css';\n\nclass SearchField extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      value: '',\n    };\n\n    this.onHandleSearchClick = this.onHandleSearchClick.bind(this);\n    this.onHandleQueryChange = this.onHandleQueryChange.bind(this);\n  }\n\n  onHandleSearchClick() {\n    const { onSearchClicked } = this.props;\n    onSearchClicked (this.state.value);\n  }\n\n  onHandleQueryChange(e) {\n    this.setState({ value: e.target.value });\n  }\n  \n  render () {\n    return (\n      <div className=\"header\">\n        <TextField fullWidth value={this.state.value} onChange={this.onHandleQueryChange} />\n        <Button color=\"primary\" onClick={this.onHandleSearchClick}>\n          Search\n        </Button>\n      </div>\n    );\n  }\n}\n\nexport default SearchField;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Button from '@material-ui/core/Button';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport './styles.css';\n\nconst Saved = () => (\n  <span className=\"savedLabel\">Saved</span>\n);\n\nconst ActionsCell = ({ setIsRelated, result }) => result.labeled ? <Saved /> : (\n  <div>\n    <Button size=\"small\" variant=\"contained\" color=\"primary\" onClick={() => setIsRelated(result, true)}> \n      Yes\n    </Button>\n    <Button size=\"small\" variant=\"contained\" color=\"secondary\" onClick={() => setIsRelated(result, false)}>\n      No\n    </Button>\n  </div>\n);\n\n\nconst ResultsGrid = ({ results, onResultSelected, setIsRelated }) => (\n  <div className=\"resultsContainer\">\n    <Table>\n      <TableHead>\n        <TableRow>\n          <TableCell align=\"left\">Results</TableCell>\n          <TableCell align=\"center\">Related?</TableCell>\n        </TableRow>\n      </TableHead>\n      <TableBody>\n        {\n          results.map(result => (\n            <TableRow key={result.url} className=\"resultRow\">\n              <TableCell className=\"resultContainer\" onClick={() => onResultSelected(result)}>\n                <p className=\"resultTitle\">\n                  <a href={result.url}>\n                    {result.name}\n                  </a>\n                </p>\n                <p className=\"resultSnippet\">\n                  {result.snippet}\n                </p>\n              </TableCell>\n              <TableCell className=\"actionsContainer\">\n                <ActionsCell setIsRelated={setIsRelated} result={result} />\n              </TableCell>\n            </TableRow>                \n          ))\n        }\n      </TableBody>\n    </Table>\n  </div>\n);\n\nResultsGrid.propTypes = {\n  results: PropTypes.array,\n}\n\nResultsGrid.defaultProps = {\n  results: [],\n}\n\nexport default ResultsGrid;\n","import { ENDPOINT } from '../config';\n\nexport const search = (query) => new Promise((resolve, reject) => {\n  const path = `${ENDPOINT}/query?q=${query}`;\n  const request = new Request (path, {\n    method: 'GET',\n  });\n  \n  fetch(request)\n    .then(res => res.json())\n    .then(json => resolve(json.values))\n    .catch(err => reject(err));\n});\n\n\nexport const saveLabel = (form) => new Promise((resolve, reject) => {\n  const request = new Request(`${ENDPOINT}/save`, {\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    method: 'POST',\n    body: JSON.stringify(form),\n  });\n  \n  fetch(request)\n    .then(res => res.json())\n    .then(json => resolve(json.values))\n    .catch(err => reject(err));\n});\n"," export const ENDPOINT = 'http://localhost:9000';\n","import React from 'react';\nimport Paper from '@material-ui/core/Paper';\nimport SearchField from './components/SearchField';\nimport ResultsGrid from './components/ResultsGrid';\nimport { search, saveLabel } from './api';\n\n\nimport './App.css';\n\nclass App extends React.Component {\n  constructor (props) {\n    super(props);\n    this.state = {\n      results: [],\n      selectedUrl: '',\n      lastSearchQuery: '',\n    };\n\n    this.onSearchClicked = this.onSearchClicked.bind(this);\n    this.onResultSelected = this.onResultSelected.bind(this);\n    this.setIsRelated = this.setIsRelated.bind(this);\n  }\n\n  async onSearchClicked(q) {\n    this.setState({ lastSearchQuery: q });\n    const results = await search(q);\n    this.setState({ results });\n  }\n\n  onResultSelected(result) {\n    this.setState({ selectedUrl: result.url });\n  }\n\n  async setIsRelated(webPage, isRelated) {\n    await saveLabel({\n      query: this.state.lastSearchQuery,\n      webPage,\n      isRelated\n    });\n    \n    const { results } = this.state;\n    const index = results.findIndex(x => x.url === webPage.url);\n\n    this.setState({\n      results: [\n        ...results.slice(0, index),\n        {\n          ...webPage,\n          labeled: true\n        },\n        ...results.slice(index + 1)\n      ]\n    });\n  }\n  \n  render () {\n    return (\n      <div className=\"wrapper\">\n        <Paper className=\"paper queryContainer\">\n          <SearchField onSearchClicked={this.onSearchClicked} />\n          <ResultsGrid results={this.state.results} onResultSelected={this.onResultSelected} setIsRelated={this.setIsRelated} />\n        </Paper>\n        <Paper className=\"paper\">\n          <iframe className=\"preview\" src={this.state.selectedUrl} title=\"previewFrame\" />\n        </Paper>\n      </div>\n    );  \n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}